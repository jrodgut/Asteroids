{
  "author": {
    "name": "Gui Lin",
    "email": "guileen@gmail.com"
  },
  "name": "iform",
  "description": "Data validation middleware",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/guileen/connect-iform.git"
  },
  "main": "iform.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "validator": "*"
  },
  "devDependencies": {},
  "readme": "node-iform\n====\n\nnode-iform is a connect middleware help you validate and convert form data.\n\n\n**NOTE** You need to view [node-validator](https://github.com/chriso/node-validator)\nfor more information.\n\n**NOTE** If you find a bug, or want some feature, send a **pull request**.\n\nInstall\n----\n\n    npm install iform\n\nExample\n----\n\n```javascript\n    var iform = require('iform');\n\n    var userForm = iform({\n            username: {\n                required : true,\n                len : [4, 15]\n            },\n            password: {\n                required : true,\n                len : [6, 20]\n            },\n\n            email : {\n                type : 'email'\n            },\n\n            birth : {\n                type : Date,\n                isAfter: new Date('01/01/1900'),\n                isBefore : null // means now\n            },\n\n            avatar : {\n                defaultValue : function(req) {\n                    return '/avatar/' + req.body.username + '.png';\n                }\n            },\n\n            age : 'int',\n\n            blog : 'url'\n    });\n\n    app.post('/signup', userForm(), function(req, res, next) {\n            if(req.iform.errors) {\n                return res.json(req.iform.errors);\n            }\n            db.users.insert(req.iform.data, function(err, data) {\n                res.json({success : true, message: 'Sign up successfully'});\n            });\n    });\n\n    app.post('/profile', userForm('birth', 'age', 'blog'), function(req, res, next){\n            if(req.iform.errors) {\n                return res.json(req.iform.errors);\n            }\n            db.users.update({username : req.session.user.username}, req.iform.data, function(err, data) {\n                res.json({success : true, message: 'Update profile successfully'});\n            });\n    });\n```\n\n### define rules\n\nAt first you need define some rules for validation\n\nAs you can see in the example, define a form like this : `var form = iform(rules);`\n\n`rules` is like `{fieldName : fieldRules, ...}`\n\n`fieldRules` is like `{ruleName : ruleParameter, ...}`\n\n```javascript\n        // field name | rule name | rule parameters\n           username  :{ len       : [4, 15] }\n```\n\nThe rule names can find at [node-validator](https://github.com/chriso/node-validator) project page.\n\nAll the methods of Validator and Filter of node-validator can be use as a rule name.\nThe rule parameters is the arguments for that method.\n\nThe `len` is defined by [node-validator](https://github.com/chriso/node-validator) like this\n\n```javascript\n    Validator.prototype.len = function(min, max) { ... }\n```\n\nIt takes two parameters. so we use an array as the parameters.\n\nThe `type` is a special rule ,e.g.\n\n```javascript\n    email : {\n        type : 'email'\n    }\n```\n\nit is equals to\n\n```javascript\n    email : {\n        'isEmail' : []\n    }\n```\n\nyou can also use `int`, `date` etc, cause the Validator defined `isInt` and `isDate`\n\nall the method of Valiator starts with `is` and take no arguments can be use as a type.\n\nif you only have a type rule you can use `fieldName : type` define it.\n\nYou can also use `Date` `Number` instead of `'date'`, `'number'`\n\n### use the middleware\n\n`userForm` you just defined is a function which returns a middleware, use like this\n\n```javascript\n    app.post('/signup', userForm(), function(req, res, next) {\n            if(req.iform.errors) {\n                return res.json(req.iform.errors);\n            }\n            db.users.insert(req.iform.data, function(err, data) {\n                res.json({success : true, message: 'Sign up successfully'});\n            });\n    });\n```\n\nthe middleware will check the `req.body` by your rules, all the validation errors \ngo to `req.iform.errors`, and the filtered and converted data go to `req.iform.data`.\n\nSince the data has been cleaned, you can use it immediately.\n\nIf there is another page also use the smae rules but only part of fields,\nyou can reuse it like this.\n\n```javascript\n    app.post('/profile', userForm('birth', 'age', 'blog'), function(req, res, next){\n            if(req.iform.errors) {\n                return res.json(req.iform.errors);\n            }\n            db.users.update({username : req.session.user.username}, req.iform.data, function(err, data) {\n                res.json({success : true, message: 'Update profile successfully'});\n            });\n    });\n```\n",
  "readmeFilename": "Readme.md",
  "_id": "iform@0.0.2",
  "dist": {
    "shasum": "ca43ca046ac6e419477a60d253a0d2e9f3f58367"
  },
  "_from": "iform@*"
}
